<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据分析基础 on QiBlog</title>
    <link>https://iamqisir.github.io/</link>
    <description>Recent content in 数据分析基础 on QiBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 28 Apr 2021 13:36:29 +0800</lastBuildDate><atom:link href="https://iamqisir.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>栈</title>
      <link>https://iamqisir.github.io/4.-data-structure/%E6%A0%88/</link>
      <pubDate>Wed, 28 Apr 2021 13:36:29 +0800</pubDate>
      
      <guid>https://iamqisir.github.io/4.-data-structure/%E6%A0%88/</guid>
      <description></description>
    </item>
    
    <item>
      <title>基础排序算法</title>
      <link>https://iamqisir.github.io/3.-algorithm/%E5%9F%BA%E7%A1%80%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 28 Apr 2021 13:35:06 +0800</pubDate>
      
      <guid>https://iamqisir.github.io/3.-algorithm/%E5%9F%BA%E7%A1%80%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <description>常见排序算法 正在施工！
这个博客记录着我学习Algorithm 4th的一些心得或者说总结，将会持续更新下去
我们为什么要学习排序算法呢？
排序就是将一组对象按照某种逻辑顺序重新排列的过程，在平时编程中虽然往往不需要自己写排序算法（编程语言往往都封装了优秀的排序算法），但是学习排序算法还是十分有意义的：
 对排序算法的分析有助于理解其他比较算法性能的方法 类似的技术可用于解决其他的问题（举一反三） 排序往往是我们解决其他问题的第一步骤   一些预备知识：
 需要注意的是，默认的排序是指将数组按升序排序 主键：可以这样理解，一个对象可能有多个属性，但我们只看重要的那个。比如一个学生有三门成绩（语数英），但我们现在想通过数学成绩排序，那么数学成绩可以理解为主键。也就是说主键是我们要比较的东西 在Java中，对象的比较可以通过实现Comparable接口或Comparator来实现，在这个文章中默认比较的对象都实现了Comparable，并使用Comparable数组的方式来代表（这个涉及到接口类型变量的知识，可以简单理解为Comparable a = b代表着b是一个实现了Comparable接口的对象，其可进行比较）。 算法的稳定性是指主键相同的数组元素在排序前后它们的相对次序不会发生变化   1. 冒泡排序 1. 原理 冒泡排序是很简单的排序方法，它的核心思想就是“落井下石”，意思就是依次将主键最大（对于单纯的数字而言就是就数值更大的意思）的元素沉到最后，而较小的元素会不断上浮，就像石头砸进水中沉底而气泡漂浮一样，这也是冒泡排序名字的由来（个人理解）。另外冒泡排序注重与元素本身（看到选择排序时你会注意到不同）
冒泡排序通过不断交换不符合顺序的相邻元素来实现排序，其每次均会通过比较找到最大的元素并将其落到最后一位。当最后一个元素落到数组头时，排序自然而然就成功了。
2. 实现 冒泡排序伪代码：
 BubbleSort：
Loop (i: From 0 to N-1):
​	Loop (j: From 0 to N-i-1):
​	if arr[j+1] &amp;lt; arr[j]:
​	交换arr[j+1]与arr[j]
 ==疑问：==
当然你会发现一个问题，外层循环的次数是固定的（没错，就是N次），如果在N次之前数组已经有序了呢？那我们岂不是浪费了大量的时间？（可以极端地假设原数组就是有序的，那么我们其实在接下来的N次大循环中什么也没做）我们可以设置一个额外的布尔变量flag来记录是否发生了交换（如果发生了交换那么flag保持为false，如果未发生交换flag就变为true），也就是我们在大循环上加入一个判断，如果flag为true就退出循环，伪代码如下:
 BubbleSort：
bool flag =false
Loop (i: From 0 To N-1):
​	if !</description>
    </item>
    
    <item>
      <title>Pandas基础</title>
      <link>https://iamqisir.github.io/2.-data-analysis/pandas%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Wed, 28 Apr 2021 13:02:01 +0800</pubDate>
      
      <guid>https://iamqisir.github.io/2.-data-analysis/pandas%E5%9F%BA%E7%A1%80/</guid>
      <description>Basic knowledge of Pandas 正在施工，有很多地方正待完善
pandas库是以numpy库为基础建成的，是python数据分析的核心库。也正因如此，pandas内的数据结构与numpy的数组有许多相似的地方。
以下的代码示例均是在引入numpy和pandas库的基础上，不要忘记！
Pandas库数据结构简介 Series对象 Series对象用来存放一维数据，由两个相互关联的数组组成。index数组存放索引（令人惊喜的是，索引可以有重复），values数组存放值。其实index对象使得操作Series和DataFrame十分方便（后面会单独拿出来一节将index对象）, 而且Series内的元素类型可以不同! 将自动生成新的数据类型! (NAN自动变化那个是什么情况?)
声明Series对象 #使用序列创建Series对象 s = pd.Series([1, 2, 3]) s = pd.Series((1, 2, 3)) s = pd.Series(range(0, 6)) #别忘记range也是一种序列对象 # 最常用的情况之一, 使用ndarray创建Series对象 s = pd.Series(np.arange(0, 6)) # 一种特殊情况 pd.Series(22, index=list(range(1, 10))) #会自动补成一样的长度，很像广播机制 # 那两者长度不相同, 但都不为1呢? 会报错!!! 想想广播机制！！！ #使用字典创建Series对象 这是十分重要的构造方法 dict = {&amp;#39;red&amp;#39;: 2000, &amp;#39;blue&amp;#39;: 1000, &amp;#39;orange&amp;#39;: 5000} s = pd.Series(dict) # 传入索引并自定义索引 --- 自定义索引会成为最终索引, 原字典里没有的将成为缺失值 #重复的index! 如下所示: red会取原来的值, 而其他原字典里没有的, 对应的值都是NAN(还是浮点类型)!</description>
    </item>
    
    <item>
      <title>Numpy基础</title>
      <link>https://iamqisir.github.io/2.-data-analysis/numpy%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Wed, 28 Apr 2021 13:01:55 +0800</pubDate>
      
      <guid>https://iamqisir.github.io/2.-data-analysis/numpy%E5%9F%BA%E7%A1%80/</guid>
      <description>Basic Numpy 正在施工，有很多地方正待完善
ndarray对象基础 什么是ndarray对象？即是N-dimentional array，也就是n维数组对象。
指定ndarray类型的对象——dtype（data type，就是n维数组对象内的基本元素类型）
numpy数组的基本知识 数组的基本属性  shape属性，即是数组的形状，用元组来描述（储存着几行几列的信息） axis属性，即是数组的轴，有0、1、2……轴（在参数列表中的axis代表着以哪个轴作为基准） ndim属性，即是数组的维数，用元组来表示（其实就是反映数组有几个轴） size属性，返回数组的长度（就是看数组里面一共有多少基本元素，不要与len()函数返回值混淆，len与ndim返回值一致） dtype属性，即是数组元素的类型（也可以在外面直接创造复杂dtype类型，并把它与一个变量绑定，可以节省代码量） itemsize属性，即是数组中每个元素的长度（以字节形式表示）   数据类型（主要在结构化数组中应用） 全部数据类型 见 Python Data Analysis P34，不过一般很少使用
结构化数组中的数据类型    bytes b1     int i1, i2, i4, i8   usigned ints u1, u2, u4, u8   floats f2, f4, f8   complex c8, c16   fixed length strings a    可以通过type函数来查看元素类型或查看ndarray的dtype属性</description>
    </item>
    
    <item>
      <title>我的开场白</title>
      <link>https://iamqisir.github.io/1.-life-sharing/%E6%88%91%E7%9A%84%E5%BC%80%E5%9C%BA%E7%99%BD/</link>
      <pubDate>Wed, 28 Apr 2021 13:01:26 +0800</pubDate>
      
      <guid>https://iamqisir.github.io/1.-life-sharing/%E6%88%91%E7%9A%84%E5%BC%80%E5%9C%BA%E7%99%BD/</guid>
      <description>老齐又双叒叕尝试搭建一个博客（心里话） Hi！能看到这篇博客的朋友们！大家好！我是Qisir，一个喜欢编程的大学生。
这篇博客是我第一个正式搭建的个人博客，主要用途是分享个人学习编程中的心得，顺便总结一下学习笔记。在空闲的时间我也会发一些读书笔记，我觉得学技术虽然很重要，但绝不能让其成为生活的全部，所以我采用读书并记录笔记的方式来给自己的灵魂加点料。学而不思则罔，思而不学则殆呀！
为什么喜欢编程？ 在第一篇博客里，我就多谈谈自己为什么喜欢编程吧！也许是跟风？看到计算机相关行业比较赚钱？还是由于其他的什么原因？
我第一门接触到的编程语言是Python，还记得那时我是高一，在新华书店里看到了《跟老齐学Python》，觉得书名跟我很是有缘啊，我们都叫老齐，哈哈！于是就拿起来读一读，发现这本书写的很通俗易懂，我非常喜欢作者的语言风格，于是我花了我本不多的零花钱把它买下来了。不过由于忙于学习，而且对电脑不熟悉，我只是偶尔拿起书看看，并没有深入地学下去。
第二次接触到的就是C++了，这是来到东大的第一门编程课，我很兴奋。但是老师的水平一言难尽，在加上C++本身看起来没有Python亲民（对于初学者来说确实是这样啊！），我只是按照学校要求完成了任务，并没有深入探究下去（虽然成绩还不错，但只会些皮毛中的皮毛）。
接下来就是Java啦！我们有一门Java选修课，但是我还是没有选（也许是受大一C++的影响？）。我选择买来《Java核心技术》来自学，这本书很厚，知识很多，我只看了许多基础的部分，一些复杂的部分我只是匆匆看完便跳过了，总的来说是学会了一点点基础，我也感觉到Java这门语言独特的特性。
还记得疫情期间，我在家里想了很多，觉得自己其实什么都没有学通，感到很惭愧。再加上我看了很多悲观的帖子，我越发觉得在大城市生存是多么不易，连呼吸都变得沉重，我逐渐放纵了，觉得努力没什么用，最后只不过是个高级奴隶罢了。在这段时间，我的绩点断崖式崩塌，不过这也帮助我开阔了视野，我开始思考绩点之外的东西，我开始思考人生的意义，我开始规划自己的未来。不过，一切都不是那么顺利。
最好的编程语言？ 还好，我发现了自己对编程的热爱。我喜欢亲手去实现一个程序，看着程序解决问题。笔记本电脑简直就是一个移动的实验室，我几乎可以在任何地方完成我想做的实验！
  我喜欢C语言的纯净，C只有最关键的东西，没有太多冗余，执行速度快！也许你觉得C语言比起其他新型语言缺少很多特性，看起来很枯燥，但是当你逐渐熟练的时候，你一定会爱上它的！C语言的世界是自由的世界！没有那么多约束，但你也要为自由付出代价（指针确实容易出问题）。
  我喜欢Python的简洁，像伪代码一样的程序，极高的可读性，丰富的第三方库，让我站在了巨人的肩膀上！每当要处理一个棘手的问题，先看看有没有第三方库吧！哈哈！
  我喜欢Java的厚重成熟，Java语言在C++的基础上减少了许多复杂易混的概念，开源社区活跃，是后台开发的主力军！我由其喜欢OOP的思想，万物皆对象，这是想要把世界封装！这不仅仅是编程范式，也是编程哲学！虽然Java也有一些语言特性让人诟病（例如不支持泛型数组、看起来啰嗦、没有C#设计优秀），但是其还是很美的一门语言，I love it!
  我喜欢**C++**的包罗万象。C++可以说的上是语言中的集大成者，它支持许多编程范式，而且执行速度也很快，是许多引擎开发的核心语言。虽然它太过复杂（支持的范式多也意味着代码规范统一困难，而且C++很多特性的实现在不同平台上是不同的，导致跨平台的代码写起来很困难），但还是非常优秀的！
  大二下学期，我开始读《算法》第四版、《数据结构》、《数据结构与算法：Python描述》（我这只菜鸡只看了一点点），我加深了对C、Java、Python的理解，我也明白了用C、Python和Java实现数据结构的区别，体会到了他们各自的优劣。我也明白了，没有所谓的最好的编程语言，只有最适合某种场景的语言。并且不要盲目追求时髦的技术，基础一定要打好（数据结构与算法、计算机组成原理、操作系统、计算机网络），要记得基础不牢，地动山摇啊！同时我也发觉编程也许是值得我寄托我整个人生的事情，也许我不会成为想Linus这样的编程大神，但我会将对编程的热忱保持下去。现在数学系的课程很多，但我还是会拿出很多时间来学习编程，原因很简单，因为我很喜欢。
对自己的认知 我知道不聪明，但我坚信我会做好！还记得之前和妈妈聊天，妈妈说小学老师曾经找过她谈话，说我是她教学生涯以来见过的写字最慢的学生。没错，确实在小学我几乎每次都是最后交上写字作业 。通过这么多年的学习，我也发现我不光是在智商上被别人超越，在学习习惯上同样是如此。还记得高中我总是缠着锦青和俊哲，问这些学习大佬如何规划自己的学习生活，我也在尝试着效仿。直到我在大一的时候，佳汶推荐我读了许多书籍，我也逐渐明白了什么是学习方法——其实就是良好的学习习惯罢了。有的大佬坚持做每日计划、坚持背单词，再加上科学地复习，（再加上他们聪明的才智），学习新知识又快又系统，而我却只像一个无头苍蝇，横冲直撞，没有目标。
现在我也形成了一套自己的学习方法论（在这里推荐斯科特杨的书《如何高效学习》、《超效率手册》，可以读一读，照上面的指南尝试做一做），虽然我不聪明，但我一定要努力。
Talk is cheap! Show me the code! Linus这句话很触动我，有时候我们可能·说的天花乱坠，但实际上什么都没做。我不想说太多了，我要去写代码去啦！我很喜欢Warren Buffett的一句话 : ”An idiot with a plan can beat a genius without a plan&amp;quot;。我走得很慢，但我永不后退！</description>
    </item>
    
  </channel>
</rss>
